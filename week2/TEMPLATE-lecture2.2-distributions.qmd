---
title: "Lecture 2.2 TEMPLATE"
subtitle: "Visualizing distributions"
author: "Liv Hemond"
date: 2025-01-13
toc: true
---

::: callout-note
This template follows [lecture 2.2 slides](https://eds-240-data-viz.github.io/course-materials/lecture-slides/lecture2.2-distributions-slides.html#/title-slide){target="\"_blank"}.
:::

## Setup

-   Find data & metadata on the [EDI Data Portal](https://portal.edirepository.org/nis/mapbrowse?scope=knb-lter-sbc&identifier=2007).
-   Get data download link by right-clicking on the **Download** button \> **Copy Link Address** \> then paste into `read_csv()`

```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#..........................load packages.........................
library(tidyverse)
library(chron)
library(naniar)
library(ggridges)
library(gghighlight)
library(ggbeeswarm)
library(see)
library(palmerpenguins) # for some minimal examples
# library(ARTofR) # for nicely formatted annotations. there's also a plugin version for how to do this ('addins' dropdown)

#..........................import data...........................
mko <- read_csv("https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-sbc.2007.17&entityid=02629ecc08a536972dec021f662428aa")

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                wrangle data                              ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

mko_clean <- mko |>

  # keep only necessary columns ----
  select(year, month, day, decimal_time, Temp_bot, Temp_top, Temp_mid) |>

  # create datetime column (not totally necessary for our plots, but it can be helpful to know how to do this!) ----
  unite(date, year, month, day, sep = "-", remove = FALSE) |>
  mutate(time = chron::times(decimal_time)) |>
  unite(date_time, date, time, sep = " ") |>

  # coerce data types ----
  mutate(date_time = as_datetime(date_time, "%Y-%m-%d %H:%M:%S", tz = "GMT"), 
         year = as.factor(year),
         month = as.factor(month),
         day = as.numeric(day)) |>

  # add month name by indexing the built-in `month.name` vector ----
  mutate(month_name = month.name[month]) |> 

  # replace 9999s with NAs ----
  naniar::replace_with_na(replace = list(Temp_bot = 9999, 
                                         Temp_top = 9999, 
                                         Temp_mid = 9999)) |>

  # select/reorder desired columns ----
  select(date_time, year, month, day, month_name, Temp_bot, Temp_mid, Temp_top)

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                            explore missing data                          ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#..........counts & percentages of missing data by year..........
see_NAs <- mko_clean |> 
  group_by(year) |> 
  naniar::miss_var_summary() |> #'naniar' package handles missing data
  filter(variable == "Temp_bot")

#...................visualize missing Temp_bot...................
bottom <- mko_clean |> select(Temp_bot)
missing_temps <- naniar::vis_miss(bottom) # visualize missing data in "lasagna" format
```

## Histograms

-   represent distribution of a numeric variable(s), which is cut into several bins -- height of bar represents \# of observations in that bin

-   Need: numeric variable with lots of values, and meaningful differences between values

-   Considerations: bin width (30 by default), too few or too many bins

### Too many groups

*Note the message, to remind us to consider adjusting our `binwidth`*

```{r}
#| eval: true
#| echo: true

# histogram with all 12 months ----
mko_clean %>% 
  # put months in chronological order (otherwise they'll be in alphabetical order). convert to factor and set order using `month.name` vector built in to R
  mutate(month_name = factor(month_name, levels = month.name)) %>% 
 
   # no need to supply y variable for histogram
  ggplot(aes(x = Temp_bot, fill = month_name)) +
  
  # change from the default 'stack' position
  geom_histogram(position = 'identity', alpha = 0.5)
```

### Alt 1: small multiples

```{r}
#| eval: true
#| echo: true
#| warning: false
#| message: false

# histogram faceted by month ----
mko_clean |> 
  mutate(month_name = factor(month_name, levels = month.name)) |> 
  ggplot(aes(x = Temp_bot)) +
  geom_histogram() +
  # split apart data by month
  facet_wrap(~month_name)
```

### Alt 2: fewer groups + update colors + modify bin widths

```{r}
#| eval: true
#| echo: true
#| warning: false

# histogram with fewer months; use these colors: c("#2C5374", "#ADD8E6", "#8B3A3A") ----
mko_clean |> 
  mutate(month_name = factor(month_name, levels = month.name)) |> 
  # keep only a few months
  filter(month_name %in% c("April", "June", "October")) %>% 
  ggplot(aes(x = Temp_bot, fill = month_name)) +
  # add black outline around bars and set binwidth (uses units of x axis data)
  geom_histogram(position = "identity", alpha = 0.5, color = "black", binwidth = 1) +
  # update with custom colors
  scale_fill_manual(values = c("#2C5374", "#ADD8E6", "#8B3A3A"))
```

## Density plots

-   represent data distribution of a numeric variable(s); uses KDE to show probability density function of the variable, the y-axis represents the estimated density, i.e. the relative likelihood of a value occurring, and the area under each curve is equal to 1

-   Need: numeric value with lots of values

-   Considerations: useful to visualize shape of data, does not indicate sample size, can be misleading with small data sets, band width affects level of smoothing

### Too many groups

```{r}
#| eval: true
#| echo: true
#| warning: false

# density plot with all 12 months ----
mko_clean |> 
  mutate(month_name = factor(x = month_name, levels = month.name)) |> 
  ggplot(aes(x = Temp_bot, fill = month_name)) +
  # add density plot layer
  geom_density(alpha = 0.5)
```

### Alt 1: small multiples

```{r}
#| eval: true
#| echo: true
#| warning: false

# density plot faceted by month ---- 
mko_clean |> 
  mutate(month_name = factor(month_name, levels = month.name)) |> 
  ggplot(aes(x = Temp_bot)) +
  geom_density(fill = "gray30") +
  # facet by month
  facet_wrap(~month_name)
```

### Alt 2: fewer groups + update colors + modify band widths

```{r}
#| eval: true
#| echo: true
#| warning: false

# density plot with fewer months; use these colors: c("#2C5374", "#ADD8E6", "#8B3A3A") ----
mko_clean |> 
  filter(month_name %in% c("April", "June", "October")) |> 
  ggplot(aes(x = Temp_bot, fill = month_name)) +
  # modify band widths (smaller band width = averages over smaller range, less smooth). default `adjust` value is 1
  geom_density(alpha = 0.5, adjust = 0.2) +
  # update with custom colors
  scale_fill_manual(values = c("#2C5374", "#ADD8E6", "#8B3A3A"))
```

## A few more histograms & density plots

### Distinction: histograms vs. density plots

-   Histograms show COUNTS (frequency) of values in each range. Density plots show PROPORTION of values in each range (area under the curve = 1).

-   Histograms can be easily visually skewed by adjustments of binwidth. Density plots are in a way more reliable, even with adjustments you'll be able to grasp the overall distribution 

```{r}
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| layout-ncol: 2

# create some dummy data ----
dummy_data <- data.frame(value = c(rnorm(n = 100, mean = 5),
                                   rnorm(n = 200, mean = 10)),
                         group = rep(c("A", "B"),
                                     times = c(100, 200)))

# histogram ----
ggplot(dummy_data, aes(x = value, fill = group)) +
  geom_histogram(position = "identity", alpha = 0.7) +
  # rug plot is another way of looking at distribution of data points
  geom_rug(aes(color = group), alpha = 0.75)

# density plot ----
ggplot(dummy_data, aes(x = value, fill = group)) +
  geom_density(alpha = 0.7) +
  geom_rug(aes(color = group), alpha = 0.75)
```

### Combining geoms

```{r}
#| eval: true
#| echo: true
#| warning: false
#| message: false

# histogram + density plot ----
ggplot(mko_clean, aes(x = Temp_bot)) +
  geom_histogram(fill = "gray", color = "black", alpha = 0.75) +
  geom_density(size = 1) 
```

### Compare groups to a whole

```{r}
#| eval: true
#| echo: true
#| warning: false
# use `after_stat(count)` to plot density of observations ----
ggplot(penguins, aes(x = body_mass_g, y = after_stat(count))) +
 
  # plot full distribution curve with label "all penguins"; remove 'species' col so that this doesn't get faceted later on ----
  geom_density(data = select(penguins, -species), 
               aes(fill = "all penguins"), color = "transparent") +
  
  # plot second curve with label "species" ----
  geom_density(aes(fill = "species"), color = "transparent") +
  
  # facet wrap by species ----
  facet_wrap(~species, nrow = 1) +
  
  # update colors, x-axis label, legend position ----
  scale_fill_manual(values = c("grey","green4"), name = NULL) +
  labs(x = "Body Mass (g)") +
  theme(legend.position = "top")
```

## Ridgeline plots

-   show distribution of a numeric variable for multiple groups (package `ggridges`)


```{r}
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| layout-ncol: 2

# basic ridgeline plot ----

# fill with color gradient; use these colors: c("#2C5374","#849BB4", "#D9E7EC", "#EF8080", "#8B3A3A") ----
ggplot(mko_clean, aes(x = Temp_bot, y = month_name, 
                      # fill based on x variable values using `after_stat()` to calculate after ridges geom is computed
                      fill = after_stat(x))) +
  # apply ridges gradient geom, set threshold for minimum height (removes tails), and set `scale` for amount of overlap 
  geom_density_ridges_gradient(rel_min_height = 0.01, scale = 3) +
  # create gradient of color values, any number
  scale_fill_gradientn(colors = c("#2C5374","#849BB4", "#D9E7EC", "#EF8080", "#8B3A3A")) +
  # reorder months that are y axis variable values (this time in ggplot layer)
  scale_y_discrete(limits = rev(month.name))
  
```

### Alt 1: reorder groups + adjust overlap & tails

```{r}
#| eval: true
#| echo: true
#| warning: false
#| message: false

# ridgeline plot with reordered months ----
ggplot(mko_clean, aes(x = Temp_bot, y = month_name, fill = after_stat(x))) +
  ggridges::geom_density_ridges_gradient() +
  scale_fill_gradientn(colors = c("#2C5374","#849BB4", "#D9E7EC", "#EF8080", "#8B3A3A"))
```

Remember, you can also reorder factor levels during the data wrangling stage:

```{r}
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| layout-ncol: 2

# e.g. by month: ----
mko_clean |> 
  ggplot(aes(x = Temp_bot, y = month_name, fill = after_stat(x))) +
  ggridges::geom_density_ridges_gradient(rel_min_height = 0.01, scale = 3) +
  scale_fill_gradientn(colors = c("#2C5374","#849BB4", "#D9E7EC", "#EF8080", "#8B3A3A"))

# e.g. by median temp ---
mko_clean |> 
  ggplot(aes(x = Temp_bot, y = month_name, fill = after_stat(x))) +
  ggridges::geom_density_ridges_gradient(rel_min_height = 0.01, scale = 3) +
  scale_fill_gradientn(colors = c("#2C5374","#849BB4", "#D9E7EC", "#EF8080", "#8B3A3A"))
```

### Alt 2: add quantiles

```{r}
#| eval: true
#| echo: true
#| warning: false
#| message: false

# ridgeline plot with quantiles ----
ggplot(mko_clean, aes(x = Temp_bot, y = month_name))
```

### Alt 3: jitter raw data

```{r}
#| eval: true
#| echo: true
#| layout-col: 2
#| warning: false
#| message: false

# jittered points (and raincloud option) ----

```

## Boxplots

-   *summarize* the distribution of a numeric variable for one or several groups

-   great summary tools, but don't show anything about amount of data

```{r}
#| eval: true
#| echo: true
#| warning: false

# boxplot with all 12 months ----
ggplot(mko_clean, aes(x = month_name, y = Temp_bot)) +
  geom_boxplot() +
  scale_x_discrete(limits = rev(month.name)) +
  coord_flip()
  
```

### Alt 1: modify outliers

```{r}
#| eval: true
#| echo: true
#| warning: false

# boxplot with modified outliers ----
ggplot(mko_clean, aes(x = month_name, y = Temp_bot)) +
  geom_boxplot() +
  scale_x_discrete(limits = rev(month.name)) + 
  coord_flip()
```

### Alt 2: hightlight a group

-   using `gghighlight` package

```{r}
#| eval: true
#| echo: true
#| warning: false

# highlight a particular group ----
ggplot(mko_clean, aes(x = month_name, y = Temp_bot, fill = month_name)) +
  geom_boxplot() +
  scale_x_discrete(limits = rev(month.name)) + 
  # highlight data that you want to have stand out
  gghighlight(month_name == "October") +
  # define highlight color
  scale_fill_manual(values = c("darkorchid1")) +
  coord_flip() +
  # remove legend
  theme(legend.position = "none")
```

### Alt 3: jitter raw data (using `{palmerpenguins}` data)

```{r}
#| eval: true
#| echo: true
#| warning: false

# add jittered data points ----
ggplot(penguins, aes(x = species, y = body_mass_g)) +
  geom_boxplot(outlier.shape = NA) +
  # add jittered data points (need to remove outliers so that they aren't double plotted)
  geom_jitter(alpha = 0.5, width = 0.2)
```

### Alt 4: dodged groups

```{r}
#| eval: true
#| echo: true
#| warning: false

# dodge groups by year ----
ggplot(penguins, aes(x = species, y = body_mass_g)) +
  geom_boxplot(outlier.shape = NA) 
```

### Alt 5: overlay beeswarm

```{r}
#| eval: true
#| echo: true
#| warning: false

# boxplot + beeswarm ----
ggplot(penguins, aes(x = species, y = body_mass_g)) +
  geom_boxplot(outlier.shape = NA) 
```

## Violin plots

-   visualize distribution of a numeric variable for one or several groups; great for multiple groups with lots of data

```{r}
#| eval: true
#| echo: true
#| warning: false

# violin plot ----
ggplot(mko_clean, aes(x = month_name, y = Temp_bot)) +
  # add violin plot
  geom_violin() +
  # add boxplot overlay
  geom_boxplot(width = 0.1, color = "gray", alpha = 0.5)
```

### Alt 1: overlay boxplot

```{r}
#| eval: true
#| echo: true
#| warning: false

# violin + boxplot ----
ggplot(mko_clean, aes(x = month_name, y = Temp_bot)) +
  geom_violin() +
  scale_x_discrete(limits = rev(month.name)) +
  coord_flip()
```

### Alt 2: half-violin half-dot plot

```{r}
#| eval: true
#| echo: true
#| warning: false

# half violin + half dot plot ----
```

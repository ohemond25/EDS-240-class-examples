---
title: "Lecture 10.1 TEMPLATE"
subtitle: "Misc. Charts"
author: "Liv Hemond"
date: 2025-03-10
toc: true
---

::: {.callout-note}
This template follows [lecture 10.1 slides](https://eds-240-data-viz.github.io/course-materials/lecture-slides/lecture10.1-misc-charts-slides.html#/title-slide){target="_blank"}. Please be sure to cross-reference the slides, which contain important information and additional context!
:::

## Waffle chart

```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false
#| fig-align: "center"
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#..........................load packages.........................
library(tidyverse)
library(waffle)
library(showtext)

#..........................import data...........................
bigfoot <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-09-13/bigfoot.csv')

#..........................import fonts..........................
font_add_google(name = "Ultra", family = "ultra")
font_add_google(name = "Josefin Sans", family = "josefin")

#................enable {showtext} for rendering.................
showtext_auto()

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                               data wrangling                             ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

ca_season_counts <- bigfoot %>% 
  filter(state == "California") %>% 
  group_by(season) %>% 
  count(season) %>% 
  ungroup() %>% # need to ungroup!
  filter(season != "Unknown") %>% 
  mutate(season = fct_relevel(season, "Spring", "Summer", "Fall", "Winter")) %>% 
  # need to arrange for waffle chart to show up in the correct order
  arrange(season, c("Spring", "Summer", "Fall", "Winter"))

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                waffle chart                              ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#........................create palettes.........................
season_palette <- c("Spring" = "#357266", 
                    "Summer" = "#FFB813", 
                    "Fall" = "#983A06", 
                    "Winter" = "#005F71")

plot_palette <- c(gray = "#757473",
                  beige = "#EFEFEF")

#.......................create plot labels.......................
title <- "Summer is the season of Bigfoot sightings in CA"
subtitle <- "Winter, on the other hand, is a rare time to spot Sasquatch"
caption <- "Source: Bigfoot Field Researchers Organization"

#......................create waffle chart.......................
ggplot(ca_season_counts,
       # values indicates number of squares to fill in for each season
       aes(fill = season, values = n)) +
  
  # geom_waffle from `waffle` package. if you want to make it a proportion, just do make_proportional = TRUE
  geom_waffle(color = "white", size = 0.3, n_rows = 10, make_proportional = FALSE) +
  
  # change from rectangles into perfect squares
  coord_fixed(ratio = 1) +
  
  scale_fill_manual(values = season_palette) +
  
  # include predefined title, subtitle, and caption
  labs(title = title,
       subtitle = subtitle,
       caption = caption) +
  
  theme_void() +
  
  theme(
    legend.position = "bottom",
    legend.title = element_blank(),
    
    # edit text elements
    legend.text = element_text(family = "josefin",
                               color = plot_palette["gray"]),
    plot.title = element_text(family = "ultra",
                              size = 17,
                              hjust = 0.5,
                              margin = margin(0, 0, 0.3, 0, "cm")),
    plot.subtitle = element_text(family = "josefin",
                                 size = 16,
                                 hjust = 0.5,
                                 margin = margin(0, 0, 0.5, 0, "cm")),
    plot.caption = element_text(family = "josefin",
                                size = 10,
                                color = plot_palette["gray"],
                                margin = margin(0.75, 0, 0, 0, "cm")),
    
    # edit background color
    plot.background = element_rect(fill = plot_palette["beige"],
                                   color = plot_palette["beige"]),
    plot.margin = margin(2, 2, 2, 2, "cm")
  )

#........................turn off showtext.......................
showtext_auto(FALSE)
```

## Bump chart

```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false
#| fig-align: "center"
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#..........................load packages.........................
library(tidyverse)
library(ggbump) # for bump charts
library(ggtext)
library(showtext)

#..........................import data...........................
jobs <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-03-05/jobs_gender.csv")

#..........................import fonts..........................
font_add_google(name = "Passion One", family = "passion")
font_add_google(name = "Oxygen", family = "oxygen")

#................enable {showtext} for rendering.................
showtext_auto()

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                wrangle data                              ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#...................rank occupations by salary...................
salary_rank_by_year <- jobs %>% 
  select(year, occupation, total_earnings) %>% 
  group_by(year) %>% 
  # create rank column, assign row number to be the rank value. flip to descending order so highest salary is top rank
  mutate(rank = row_number(desc(total_earnings))) %>% 
  ungroup() %>% 
  # order by rank and then year (lowest first)
  arrange(rank, year)

#........get top 8 occupation names for final year (2016)........
top2016 <- salary_rank_by_year %>% 
  filter(year == 2016, rank <= 8) %>% 
  pull(occupation)

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                 bump chart                               ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#.................create palette & assign colors.................

# grab magma palette ----
magma_pal <- viridisLite::magma(12)

# view magma colors ----
# monochromeR::view_palette(magma_pal)

# assign magma colors to top 8 occupations ----
occupation_colors <- c(
  "Physicians and surgeons" = magma_pal[3],
  "Nurse anesthetists" = magma_pal[4],
  "Dentists" = magma_pal[5],
  "Architectural and engineering managers" = magma_pal[6],
  "Lawyers" = magma_pal[7], 
  "Podiatrists" = magma_pal[8],
  "Chief executives" = magma_pal[9],
  "Petroleum engineers" = magma_pal[10]
)

# create palette for additional plot theming ----
plot_palette <- c(dark_purple = "#2A114E", 
                  dark_gray = "#6D6B71",
                  light_pink = "#FFF8F4")

#.......................create plot labels.......................
title <- "Top eight highest paying occupations in 2016"
subtitle <- "Medical professionals held onto the same top three spots across years, while petroleum engineers steadily climbed the ranks from 10^th^ in 2013 to 4^th^ in 2016"
caption <- "Data Source: Bureau of Labor Statistics"

#........................create bump chart.......................
salary_rank_by_year %>% 
  # take only the occupations that are in the top 8 in 2016
  filter(occupation %in% top2016) %>% 
  
  ggplot(aes(x = year, y = rank, color = occupation)) +
  
  # add geom_point to be able to add line segments indicating each year
  geom_point(shape = "|", size = 6) +
  
  # connect points using geom_bump
  geom_bump(linewidth = 1) +
  
  # add occupation and rank label annotations
  geom_text(
    # select the 8 occupations that are top in 2016, but for the year of 2013
    data = salary_rank_by_year %>% filter(year == 2013, occupation %in% top2016),
    aes(label = occupation),
    hjust = 1,
    nudge_x = -0.1,
    family = "oxygen",
    fontface = "bold"
  ) +
  
  geom_text(
    data = salary_rank_by_year %>% filter(year == 2016, occupation %in% top2016),
    aes(label = rank),
    hjust = 0,
    nudge_x = 0.1,
    size = 5,
    family = "oxygen",
    fontface = "bold"
  ) +
  
  # add 2013 and 2016 to top of chart
  annotate(
    geom = "text",
    x = c(2013, 2016),
    y = c(-0.2, -0.2),
    label = c("2013", "2016"),
    hjust = c(0, 1),
    vjust = 1,
    size = 5,
    family = "oxygen",
    fontface = "bold",
    color = plot_palette["dark_gray"]
  ) +
  
  # make sure #1 rank is at the top of the plot
  scale_y_reverse() +
  
  scale_color_manual(values = occupation_colors) +
  
  # adjust the coordinate plane that the plot appears on to make more space at the edges of the plot
  # turn off clip so that you can add text etc outside of the plot margins!
  coord_cartesian(xlim = c(2010, 2016),
                  ylim = c(11, 0.25),
                  clip = "off") +
  
  theme(
    legend.position = "none"
  )

#........................turn off showtext.......................

```


